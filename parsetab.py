
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN COLON COMMA DIV DO ELSE END EQ FOR FORWARD FUNCTION GE GT IDENT IF INTERVAL LBRACKET LE LPAREN LT MINUS MULT NEQ NUMBER PERIOD PLUS PROCEDURE PROGRAM RBRACKET READ RPAREN SEMICOLON THEN TO VAR WHILE WRITE\n    program : PROGRAM IDENT SEMICOLON outblock PERIOD\n    \n    outblock : var_decl_part subprog_decl_part outblock_action statement\n    \n    outblock_action :\n    \n    var_decl_part : var_decl_list SEMICOLON\n                  |\n    \n    var_decl_list : var_decl_list SEMICOLON var_decl\n                  | var_decl\n    \n    var_decl : VAR id_list\n    \n    subprog_decl_part : subprog_decl_list SEMICOLON\n                      |\n    \n    subprog_decl_list : subprog_decl_list SEMICOLON subprog_decl\n                      | subprog_decl\n    \n    subprog_decl : proc_decl\n    \n    proc_decl : PROCEDURE proc_name SEMICOLON proc_decl_action_1 inblock proc_decl_action_2\n    \n    proc_decl_action_1 :\n    \n    proc_decl_action_2 :\n    \n    proc_name : IDENT proc_name_action\n    \n    proc_name_action :\n    \n    inblock : var_decl_part statement\n    \n    statement_list : statement_list SEMICOLON statement\n                   | statement\n    \n    statement : assignment_statement\n              | if_statement\n              | while_statement\n              | for_statement\n              | proc_call_statement\n              | null_statement\n              | block_statement\n              | read_statement\n              | write_statement\n    \n    assignment_statement : IDENT assignment_statement_action ASSIGN expression\n    \n    assignment_statement_action :\n    \n    if_statement : IF condition THEN statement else_statement\n    \n    else_statement : ELSE statement\n                   |\n    \n    while_statement : WHILE condition DO statement\n    \n    for_statement : FOR IDENT for_statement_action ASSIGN expression TO expression DO statement\n    \n    for_statement_action :\n    \n    proc_call_statement : proc_call_name\n    \n    proc_call_name : IDENT proc_call_name_action\n    \n    proc_call_name_action :\n    \n    block_statement : BEGIN statement_list END\n    \n    read_statement : READ LPAREN IDENT read_statement_action RPAREN\n    \n    read_statement_action :\n    \n    write_statement : WRITE LPAREN expression RPAREN\n    \n    null_statement :\n    \n    condition : expression EQ expression\n              | expression NEQ expression\n              | expression LT expression\n              | expression GT expression\n              | expression LE expression\n              | expression GE expression\n    \n    expression : term\n               | PLUS term\n               | MINUS term\n               | expression PLUS term\n               | expression MINUS term\n    \n    term : factor\n         | term MULT factor\n         | term DIV factor\n    \n    factor : var_name\n           | NUMBER\n           | LPAREN expression RPAREN\n    \n    var_name : IDENT var_name_action\n    \n    var_name_action :\n    \n    arg_list : expression\n             | arg_list COMMA expression\n    \n    id_list : IDENT id_list_action\n            | id_list COMMA IDENT id_list_action\n    \n    id_list_action :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,10,],[0,-1,]),'IDENT':([2,4,6,9,11,15,16,19,20,24,37,38,39,41,45,53,54,58,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,84,87,91,106,113,117,119,],[3,-5,-10,18,-3,22,-4,36,-9,47,59,59,61,36,-15,59,59,59,88,59,-5,59,36,59,59,59,59,59,59,59,59,59,59,36,36,36,59,36,59,36,]),'SEMICOLON':([3,7,8,12,13,14,16,17,18,21,22,23,25,27,28,29,30,31,32,33,34,35,36,40,41,44,45,46,47,49,52,55,56,57,59,62,63,66,67,69,80,81,83,84,86,87,90,91,92,93,100,101,102,103,104,105,107,109,110,111,112,113,115,116,119,120,],[4,16,-7,20,-12,-13,-4,-8,-70,45,-18,-6,-68,-22,-23,-24,-25,-26,-27,-28,-29,-30,-41,-39,-46,-11,-15,-17,-70,-40,-53,-58,-61,-62,-65,87,-21,-5,-69,-46,-54,-55,-64,-46,-42,-46,-16,-46,-31,-35,-56,-57,-59,-60,-63,-36,-20,-45,-14,-19,-33,-46,-43,-34,-46,-37,]),'PROCEDURE':([4,6,16,20,],[-5,15,-4,15,]),'IF':([4,6,11,16,19,20,41,45,66,69,84,87,91,113,119,],[-5,-10,-3,-4,37,-9,37,-15,-5,37,37,37,37,37,37,]),'WHILE':([4,6,11,16,19,20,41,45,66,69,84,87,91,113,119,],[-5,-10,-3,-4,38,-9,38,-15,-5,38,38,38,38,38,38,]),'FOR':([4,6,11,16,19,20,41,45,66,69,84,87,91,113,119,],[-5,-10,-3,-4,39,-9,39,-15,-5,39,39,39,39,39,39,]),'BEGIN':([4,6,11,16,19,20,41,45,66,69,84,87,91,113,119,],[-5,-10,-3,-4,41,-9,41,-15,-5,41,41,41,41,41,41,]),'READ':([4,6,11,16,19,20,41,45,66,69,84,87,91,113,119,],[-5,-10,-3,-4,42,-9,42,-15,-5,42,42,42,42,42,42,]),'WRITE':([4,6,11,16,19,20,41,45,66,69,84,87,91,113,119,],[-5,-10,-3,-4,43,-9,43,-15,-5,43,43,43,43,43,43,]),'PERIOD':([4,5,6,11,16,19,20,26,27,28,29,30,31,32,33,34,35,36,40,49,52,55,56,57,59,69,80,81,83,84,86,92,93,100,101,102,103,104,105,109,112,113,115,116,119,120,],[-5,10,-10,-3,-4,-46,-9,-2,-22,-23,-24,-25,-26,-27,-28,-29,-30,-41,-39,-40,-53,-58,-61,-62,-65,-46,-54,-55,-64,-46,-42,-31,-35,-56,-57,-59,-60,-63,-36,-45,-33,-46,-43,-34,-46,-37,]),'VAR':([4,16,45,66,],[9,9,-15,9,]),'COMMA':([17,18,25,47,67,],[24,-70,-68,-70,-69,]),'END':([27,28,29,30,31,32,33,34,35,36,40,41,49,52,55,56,57,59,62,63,69,80,81,83,84,86,87,92,93,100,101,102,103,104,105,107,109,112,113,115,116,119,120,],[-22,-23,-24,-25,-26,-27,-28,-29,-30,-41,-39,-46,-40,-53,-58,-61,-62,-65,86,-21,-46,-54,-55,-64,-46,-42,-46,-31,-35,-56,-57,-59,-60,-63,-36,-20,-45,-33,-46,-43,-34,-46,-37,]),'ELSE':([27,28,29,30,31,32,33,34,35,36,40,49,52,55,56,57,59,69,80,81,83,84,86,92,93,100,101,102,103,104,105,109,112,113,115,116,119,120,],[-22,-23,-24,-25,-26,-27,-28,-29,-30,-41,-39,-40,-53,-58,-61,-62,-65,-46,-54,-55,-64,-46,-42,-31,113,-56,-57,-59,-60,-63,-36,-45,-33,-46,-43,-34,-46,-37,]),'ASSIGN':([36,48,61,85,],[-32,68,-38,106,]),'PLUS':([37,38,51,52,55,56,57,58,59,65,68,70,71,72,73,74,75,80,81,82,83,89,92,94,95,96,97,98,99,100,101,102,103,104,106,114,117,118,],[53,53,76,-53,-58,-61,-62,53,-65,53,53,53,53,53,53,53,53,-54,-55,76,-64,76,76,76,76,76,76,76,76,-56,-57,-59,-60,-63,53,76,53,76,]),'MINUS':([37,38,51,52,55,56,57,58,59,65,68,70,71,72,73,74,75,80,81,82,83,89,92,94,95,96,97,98,99,100,101,102,103,104,106,114,117,118,],[54,54,77,-53,-58,-61,-62,54,-65,54,54,54,54,54,54,54,54,-54,-55,77,-64,77,77,77,77,77,77,77,77,-56,-57,-59,-60,-63,54,77,54,77,]),'NUMBER':([37,38,53,54,58,65,68,70,71,72,73,74,75,76,77,78,79,106,117,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'LPAREN':([37,38,42,43,53,54,58,65,68,70,71,72,73,74,75,76,77,78,79,106,117,],[58,58,64,65,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'THEN':([50,52,55,56,57,59,80,81,83,94,95,96,97,98,99,100,101,102,103,104,],[69,-53,-58,-61,-62,-65,-54,-55,-64,-47,-48,-49,-50,-51,-52,-56,-57,-59,-60,-63,]),'EQ':([51,52,55,56,57,59,80,81,83,100,101,102,103,104,],[70,-53,-58,-61,-62,-65,-54,-55,-64,-56,-57,-59,-60,-63,]),'NEQ':([51,52,55,56,57,59,80,81,83,100,101,102,103,104,],[71,-53,-58,-61,-62,-65,-54,-55,-64,-56,-57,-59,-60,-63,]),'LT':([51,52,55,56,57,59,80,81,83,100,101,102,103,104,],[72,-53,-58,-61,-62,-65,-54,-55,-64,-56,-57,-59,-60,-63,]),'GT':([51,52,55,56,57,59,80,81,83,100,101,102,103,104,],[73,-53,-58,-61,-62,-65,-54,-55,-64,-56,-57,-59,-60,-63,]),'LE':([51,52,55,56,57,59,80,81,83,100,101,102,103,104,],[74,-53,-58,-61,-62,-65,-54,-55,-64,-56,-57,-59,-60,-63,]),'GE':([51,52,55,56,57,59,80,81,83,100,101,102,103,104,],[75,-53,-58,-61,-62,-65,-54,-55,-64,-56,-57,-59,-60,-63,]),'RPAREN':([52,55,56,57,59,80,81,82,83,88,89,100,101,102,103,104,108,],[-53,-58,-61,-62,-65,-54,-55,104,-64,-44,109,-56,-57,-59,-60,-63,115,]),'DO':([52,55,56,57,59,60,80,81,83,94,95,96,97,98,99,100,101,102,103,104,118,],[-53,-58,-61,-62,-65,84,-54,-55,-64,-47,-48,-49,-50,-51,-52,-56,-57,-59,-60,-63,119,]),'TO':([52,55,56,57,59,80,81,83,100,101,102,103,104,114,],[-53,-58,-61,-62,-65,-54,-55,-64,-56,-57,-59,-60,-63,117,]),'MULT':([52,55,56,57,59,80,81,83,100,101,102,103,104,],[78,-58,-61,-62,-65,78,78,-64,78,78,-59,-60,-63,]),'DIV':([52,55,56,57,59,80,81,83,100,101,102,103,104,],[79,-58,-61,-62,-65,79,79,-64,79,79,-59,-60,-63,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'outblock':([4,],[5,]),'var_decl_part':([4,66,],[6,91,]),'var_decl_list':([4,66,],[7,7,]),'var_decl':([4,16,66,],[8,23,8,]),'subprog_decl_part':([6,],[11,]),'subprog_decl_list':([6,],[12,]),'subprog_decl':([6,20,],[13,44,]),'proc_decl':([6,20,],[14,14,]),'id_list':([9,],[17,]),'outblock_action':([11,],[19,]),'proc_name':([15,],[21,]),'id_list_action':([18,47,],[25,67,]),'statement':([19,41,69,84,87,91,113,119,],[26,63,93,105,107,111,116,120,]),'assignment_statement':([19,41,69,84,87,91,113,119,],[27,27,27,27,27,27,27,27,]),'if_statement':([19,41,69,84,87,91,113,119,],[28,28,28,28,28,28,28,28,]),'while_statement':([19,41,69,84,87,91,113,119,],[29,29,29,29,29,29,29,29,]),'for_statement':([19,41,69,84,87,91,113,119,],[30,30,30,30,30,30,30,30,]),'proc_call_statement':([19,41,69,84,87,91,113,119,],[31,31,31,31,31,31,31,31,]),'null_statement':([19,41,69,84,87,91,113,119,],[32,32,32,32,32,32,32,32,]),'block_statement':([19,41,69,84,87,91,113,119,],[33,33,33,33,33,33,33,33,]),'read_statement':([19,41,69,84,87,91,113,119,],[34,34,34,34,34,34,34,34,]),'write_statement':([19,41,69,84,87,91,113,119,],[35,35,35,35,35,35,35,35,]),'proc_call_name':([19,41,69,84,87,91,113,119,],[40,40,40,40,40,40,40,40,]),'proc_name_action':([22,],[46,]),'assignment_statement_action':([36,],[48,]),'proc_call_name_action':([36,],[49,]),'condition':([37,38,],[50,60,]),'expression':([37,38,58,65,68,70,71,72,73,74,75,106,117,],[51,51,82,89,92,94,95,96,97,98,99,114,118,]),'term':([37,38,53,54,58,65,68,70,71,72,73,74,75,76,77,106,117,],[52,52,80,81,52,52,52,52,52,52,52,52,52,100,101,52,52,]),'factor':([37,38,53,54,58,65,68,70,71,72,73,74,75,76,77,78,79,106,117,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,102,103,55,55,]),'var_name':([37,38,53,54,58,65,68,70,71,72,73,74,75,76,77,78,79,106,117,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'statement_list':([41,],[62,]),'proc_decl_action_1':([45,],[66,]),'var_name_action':([59,],[83,]),'for_statement_action':([61,],[85,]),'inblock':([66,],[90,]),'read_statement_action':([88,],[108,]),'proc_decl_action_2':([90,],[110,]),'else_statement':([93,],[112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENT SEMICOLON outblock PERIOD','program',5,'p_program','parser.py',101),
  ('outblock -> var_decl_part subprog_decl_part outblock_action statement','outblock',4,'p_outblock','parser.py',110),
  ('outblock_action -> <empty>','outblock_action',0,'p_outblock_action','parser.py',116),
  ('var_decl_part -> var_decl_list SEMICOLON','var_decl_part',2,'p_var_decl_part','parser.py',127),
  ('var_decl_part -> <empty>','var_decl_part',0,'p_var_decl_part','parser.py',128),
  ('var_decl_list -> var_decl_list SEMICOLON var_decl','var_decl_list',3,'p_var_decl_list','parser.py',134),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list','parser.py',135),
  ('var_decl -> VAR id_list','var_decl',2,'p_var_decl','parser.py',141),
  ('subprog_decl_part -> subprog_decl_list SEMICOLON','subprog_decl_part',2,'p_subprog_decl_part','parser.py',147),
  ('subprog_decl_part -> <empty>','subprog_decl_part',0,'p_subprog_decl_part','parser.py',148),
  ('subprog_decl_list -> subprog_decl_list SEMICOLON subprog_decl','subprog_decl_list',3,'p_subprog_decl_list','parser.py',154),
  ('subprog_decl_list -> subprog_decl','subprog_decl_list',1,'p_subprog_decl_list','parser.py',155),
  ('subprog_decl -> proc_decl','subprog_decl',1,'p_subprog_decl','parser.py',161),
  ('proc_decl -> PROCEDURE proc_name SEMICOLON proc_decl_action_1 inblock proc_decl_action_2','proc_decl',6,'p_proc_decl','parser.py',167),
  ('proc_decl_action_1 -> <empty>','proc_decl_action_1',0,'p_proc_decl_action_1','parser.py',173),
  ('proc_decl_action_2 -> <empty>','proc_decl_action_2',0,'p_proc_decl_action_2','parser.py',181),
  ('proc_name -> IDENT proc_name_action','proc_name',2,'p_proc_name','parser.py',189),
  ('proc_name_action -> <empty>','proc_name_action',0,'p_proc_name_action','parser.py',200),
  ('inblock -> var_decl_part statement','inblock',2,'p_inblock','parser.py',207),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',213),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',214),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',220),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',221),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',222),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',223),
  ('statement -> proc_call_statement','statement',1,'p_statement','parser.py',224),
  ('statement -> null_statement','statement',1,'p_statement','parser.py',225),
  ('statement -> block_statement','statement',1,'p_statement','parser.py',226),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',227),
  ('statement -> write_statement','statement',1,'p_statement','parser.py',228),
  ('assignment_statement -> IDENT assignment_statement_action ASSIGN expression','assignment_statement',4,'p_assignment_statement','parser.py',234),
  ('assignment_statement_action -> <empty>','assignment_statement_action',0,'p_assignment_statement_action','parser.py',243),
  ('if_statement -> IF condition THEN statement else_statement','if_statement',5,'p_if_statement','parser.py',257),
  ('else_statement -> ELSE statement','else_statement',2,'p_else_statement','parser.py',263),
  ('else_statement -> <empty>','else_statement',0,'p_else_statement','parser.py',264),
  ('while_statement -> WHILE condition DO statement','while_statement',4,'p_while_statement','parser.py',269),
  ('for_statement -> FOR IDENT for_statement_action ASSIGN expression TO expression DO statement','for_statement',9,'p_for_statement','parser.py',275),
  ('for_statement_action -> <empty>','for_statement_action',0,'p_for_statement_action','parser.py',281),
  ('proc_call_statement -> proc_call_name','proc_call_statement',1,'p_proc_call_statement','parser.py',288),
  ('proc_call_name -> IDENT proc_call_name_action','proc_call_name',2,'p_proc_call_name','parser.py',294),
  ('proc_call_name_action -> <empty>','proc_call_name_action',0,'p_proc_call_name_action','parser.py',300),
  ('block_statement -> BEGIN statement_list END','block_statement',3,'p_block_statement','parser.py',307),
  ('read_statement -> READ LPAREN IDENT read_statement_action RPAREN','read_statement',5,'p_read_statement','parser.py',313),
  ('read_statement_action -> <empty>','read_statement_action',0,'p_read_statement_action','parser.py',319),
  ('write_statement -> WRITE LPAREN expression RPAREN','write_statement',4,'p_write_statement','parser.py',325),
  ('null_statement -> <empty>','null_statement',0,'p_null_statement','parser.py',331),
  ('condition -> expression EQ expression','condition',3,'p_condition','parser.py',337),
  ('condition -> expression NEQ expression','condition',3,'p_condition','parser.py',338),
  ('condition -> expression LT expression','condition',3,'p_condition','parser.py',339),
  ('condition -> expression GT expression','condition',3,'p_condition','parser.py',340),
  ('condition -> expression LE expression','condition',3,'p_condition','parser.py',341),
  ('condition -> expression GE expression','condition',3,'p_condition','parser.py',342),
  ('expression -> term','expression',1,'p_expression','parser.py',348),
  ('expression -> PLUS term','expression',2,'p_expression','parser.py',349),
  ('expression -> MINUS term','expression',2,'p_expression','parser.py',350),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',351),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',352),
  ('term -> factor','term',1,'p_term','parser.py',391),
  ('term -> term MULT factor','term',3,'p_term','parser.py',392),
  ('term -> term DIV factor','term',3,'p_term','parser.py',393),
  ('factor -> var_name','factor',1,'p_factor','parser.py',430),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',431),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',432),
  ('var_name -> IDENT var_name_action','var_name',2,'p_var_name','parser.py',447),
  ('var_name_action -> <empty>','var_name_action',0,'p_var_name_action','parser.py',453),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',465),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',466),
  ('id_list -> IDENT id_list_action','id_list',2,'p_id_list','parser.py',472),
  ('id_list -> id_list COMMA IDENT id_list_action','id_list',4,'p_id_list','parser.py',473),
  ('id_list_action -> <empty>','id_list_action',0,'p_id_list_action','parser.py',479),
]
